// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    role          Role        @default(USER)
    credits       Int         @default(0)
    accounts      Account[]
    sessions      Session[]
    subscription  Subscription?
    credit        Credit?
    challenges    Challenge[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Subscription {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    subscribed  Boolean  @default(true)
    subscribed_at DateTime?
    subscription_id String
    user        User     @relation(fields: [userId], references: [id])
    userId      String   @unique
}

model Credit {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    challenge_amount      Int
    design_amount         Int
    user        User     @relation(fields: [userId], references: [id])
    userId      String   @unique
}

model Challenge {
    id                  Int        @id @default(autoincrement())
    name                String
    description         String
    language            Language
    difficulty          Difficulty
    brief               String
    tips                String
    assets_presentation String[]
    premium             Boolean
    starter_code_url    String
    starter_figma_url   String
    createdAt           DateTime   @default(now())
    updatedAt           DateTime   @updatedAt
    createdBy           User       @relation(fields: [createdById], references: [id])
    createdById         String

    @@index([name])
}

enum Role {
    USER
    COLLABORATOR
    ADMIN
}

enum Language {
    HTML_CSS
    JS
    API
}

enum Difficulty {
    NEWBIE
    JUNIOR
    INTERMEDIATE
    ADVANCED
    GURU
}
